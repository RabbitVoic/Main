
&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	ВыполнитьОбменНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОтправки()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	otus_ПисьмоПретензии.Номер КАК НомерПисьма,
	               |	otus_ПисьмоПретензии.Дата КАК ДатаПисьма,
	               |	Контрагенты.Наименование КАК Контрагент,
	               |	Контрагенты.Телефон КАК КонтрагентТелефон,
	               |	Контрагенты.ЭлектроннаяПочта КАК КонтрагентЭлектроннаяПочта,
	               |	otus_Договор.Номер КАК НомерДоговора,
	               |	otus_Договор.ДатаЗаключения КАК ДатаЗаключенияДоговора,
	               |	Контрагенты.Ссылка КАК СсылкаКонтрагент,
	               |	otus_Договор.Ссылка КАК СсылкаДоговор,
	               |	otus_ПисьмоПретензии.Ссылка КАК СсылкаПисьмо,
	               |	otus_АктПередачиТовара.Ссылка КАК Ссылка
	               |ИЗ
	               |	РегистрСведений.otus_СписокПисем.СрезПоследних(&Период, ) КАК otus_СписокПисемСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.otus_ПисьмоПретензии КАК otus_ПисьмоПретензии
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.otus_АктПередачиТовара КАК otus_АктПередачиТовара
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.otus_Договор КАК otus_Договор
	               |				ПО otus_АктПередачиТовара.Договор = otus_Договор.Ссылка
	               |			ПО otus_ПисьмоПретензии.АктПередачи = otus_АктПередачиТовара.Ссылка
	               |		ПО otus_СписокПисемСрезПоследних.Письмо = otus_ПисьмоПретензии.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО otus_СписокПисемСрезПоследних.Контрагент = Контрагенты.Ссылка
	               |ГДЕ
	               |	otus_СписокПисемСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.otus_СтатусОтправки.КОтправке)"; 
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	
	
	Возврат Запрос.Выполнить();
	
	
КонецФункции	

Процедура ВыполнитьОбменНаСервере()
	
	Старт = ТекущаяДата();
	//
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("content-type","application/json; charset=utf-8");
	//
	httpЗапрос = Новый httpЗапрос("/api/exchanges/%2F/OTUS_Test/publish",Заголовки);
	//
	httpСоединение = Новый httpСоединение("192.168.0.112",15672,"admin","Tgbhu890",,,,);
	Реквизит1 = "";

	РезультатЗапроса = ПолучитьДанныеДляОтправки();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл            
		
		ДанныеСообщения = ЗаписатьЗначениеJSON(Выборка);
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON,ДанныеСообщения);
		РезультатДанных = ЗаписьJSON.Закрыть();
		
		Сообщение = Новый Структура("properties,routing_key,payload,payload_encoding",Новый Структура(),"letters.all",РезультатДанных,"string");
		Реквизит1 = ДанныеВJSON(Сообщение); 
		httpЗапрос.УстановитьТелоИзСтроки(ДанныеВJSON(Сообщение));
		Ответ = httpСоединение.ВызватьHTTPМетод("POST",httpЗапрос);
		
		ЗаписьРегистр = РегистрыСведений.otus_СписокПисем.СоздатьНаборЗаписей();
		
		ЗаписьРегистр.Отбор.Письмо.Установить(Выборка.СсылкаПисьмо);
		ЗаписьРегистр.Отбор.Контрагент.Установить(Выборка.СсылкаКонтрагент);
		ЗаписьРегистр.Прочитать();
		
		Для Каждого Запись Из ЗаписьРегистр Цикл
			Запись.Период = ТекущаяДата();
			Запись.Письмо = Выборка.СсылкаПисьмо;
			Запись.Контрагент = Выборка.СсылкаКонтрагент;
			Запись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Запись.Статус = Перечисления.otus_СтатусОтправки.Отправлено;
			
			ЗаписьРегистр.Записать(Ложь);  
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры 

Функция ЗаписатьЗначениеJSON(ЭлементВыборки)
	
	
	СоответствиеЗначений = Новый Структура();
	
	СоответствиеЗначений.Вставить("УИДПисьма",Строка(ЭлементВыборки.СсылкаПисьмо.УникальныйИдентификатор()));
	СоответствиеЗначений.Вставить("НомерПисьма",ЭлементВыборки.НомерПисьма);
	СоответствиеЗначений.Вставить("ДатаПисьма",Формат(ЭлементВыборки.ДатаПисьма,"ДЛФ=Д"));
	СоответствиеЗначений.Вставить("УИДКонтрагент",Строка(ЭлементВыборки.СсылкаКонтрагент.УникальныйИдентификатор()));
	СоответствиеЗначений.Вставить("Контрагент",ЭлементВыборки.Контрагент);
	СоответствиеЗначений.Вставить("КонтрагентТелефон",ЭлементВыборки.КонтрагентТелефон);
	СоответствиеЗначений.Вставить("КонтрагентЭлектроннаяПочта",ЭлементВыборки.КонтрагентЭлектроннаяПочта);
	СоответствиеЗначений.Вставить("УИДДоговор",Строка(ЭлементВыборки.СсылкаДоговор.УникальныйИдентификатор()));
	СоответствиеЗначений.Вставить("НомерДоговора",ЭлементВыборки.НомерДоговора);
	СоответствиеЗначений.Вставить("ДатаЗаключенияДоговора",Формат(ЭлементВыборки.ДатаЗаключенияДоговора,"ДЛФ=Д"));
	Товары = ПолучитьТаблицуТоваров(ЭлементВыборки.Ссылка);
	СоответствиеЗначений.Вставить("Товары",Товары);
	Возврат СоответствиеЗначений; 
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьТаблицуТоваров(Акт)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.Наименование КАК Наименование,
	|	Товары.Ссылка КАК УИД,
	|	otus_АктПередачиТовараСписокТоваров.Количество КАК Количество
	|ИЗ
	|	Документ.otus_АктПередачиТовара.СписокТоваров КАК otus_АктПередачиТовараСписокТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Товары КАК Товары
	|		ПО (otus_АктПередачиТовараСписокТоваров.Товар = Товары.Ссылка)
	|ГДЕ
	|	otus_АктПередачиТовараСписокТоваров.Ссылка = &Ссылка
	|";  
	
	Запрос.УстановитьПараметр("Ссылка",Акт);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ВыходнаяСтруктура = Новый Структура();
	
	СписокКолонок = "";
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СписокКолонок = СписокКолонок + ?(СписокКолонок="","",",")+Колонка.Имя;
	КонецЦикла;
	
	Для Каждого СтрокаТЗ ИЗ РезультатЗапроса Цикл
 		Товары = Новый Структура(СписокКолонок);
		
		Товары.Вставить("Количество",СтрокаТЗ.Количество);
		Товары.Вставить("Товар",СтрокаТЗ.Наименование);
		Товары.Вставить("УИДТовара",Строка(СтрокаТЗ.УИД.УникальныйИдентификатор()));
		
		ВыходнаяСтруктура.Вставить("Строка"+РезультатЗапроса.Индекс(СтрокаТЗ),Товары);
	КонецЦикла;
	
	Возврат ВыходнаяСтруктура;
	
	
КонецФункции	

Функция ДанныеВJSON(Значение, Знач ПараметрыЗаписиJSON = Неопределено, НастройкиСериализации = Неопределено) Экспорт
	Если ПараметрыЗаписиJSON = Неопределено Тогда
	    ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	КонецЕсли;
    
    ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON); 
    ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализации);
    Результат = ЗаписьJSON.Закрыть();    
    
    Возврат Результат;
КонецФункции



